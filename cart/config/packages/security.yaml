#security:
##    enable_authenticator_manager: true # Only for Symfony 5.4
#    firewalls:
#        login:
#            pattern: ^/api/v1/login
#            stateless: true
#            json_login:
#                check_path: /api/v1/login_check
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#
#        api:
#            pattern:   ^/api/v1/
#            stateless: true
#            jwt: ~
#
#    access_control:
#        - { path: ^/api/v1/login, roles: PUBLIC_ACCESS }
#        - { path: ^/api/v1/products, roles: PUBLIC_ACCESS }
#        - { path: ^/api/v1,       roles: IS_AUTHENTICATED_FULLY }
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: argon2id
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: login
    firewalls:
        login:
            pattern: ^/sign-in
            stateless: true
            json_login:
                check_path: /sign-in
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/
            stateless: true
            jwt: ~
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            lazy: true
#            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/products, roles: PUBLIC_ACCESS }
        - { path: ^/sign-up, roles: PUBLIC_ACCESS }
        - { path: ^/sign-in, roles: PUBLIC_ACCESS }
        - { path: ^/,       roles: IS_AUTHENTICATED_FULLY }
#         - { path: ^/admin, roles: ROLE_ADMIN }
#         - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
